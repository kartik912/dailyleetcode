class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n==1) return {0};
        vector<int> degree(n, 0);
        vector<vector<int>> g(n);
        for(auto it : edges) {
            g[it[0]].push_back(it[1]);
            g[it[1]].push_back(it[0]);
            degree[it[0]]++;
            degree[it[1]]++;
        }
        for(auto it : degree) cout << it << " ";

        queue<int> q;
        for(int i=0;i<n;i++) {
            if(degree[i] == 1) q.push(i);
        }

        vector<int> res;

        while(!q.empty()) {
            int h = q.size();
            res.clear();

            while(h--) {
                int node = q.front();
                q.pop();
                res.push_back(node);
                for(auto it : g[node]) {
                    degree[it]--;
                    if(degree[it] == 1) q.push(it);
                }
            }
        }
        return res;
    }
};
